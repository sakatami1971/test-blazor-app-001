@page "/nippoulist"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Web
@using MatBlazor
@using NippouInputDialog
@rendermode InteractiveServer
@inject IMatDialogService MatDialogService
@inject IJSRuntime JsRuntime

<PageTitle>運転日報入力確認</PageTitle>

<h1>運転日報入力確認</h1>

<p>
    <MatTextField type="text" label="給与年月" @bind-Value="SalaryYYYYMM"/>
    <MatSelectItem ReadOnly="true" label="乗務員No." @bind-Value="assetCrewNo" Items=@crewNoList>
        <ItemTemplate>
            <span>@context?.No</span>
        </ItemTemplate>
    </MatSelectItem>
    <MatStringField  ReadOnly="true" Label="乗務員名" Value=@(assetCrewNo?.Name)></MatStringField >
</p>
<p>    
    <MatButton class="btn btn-primary" style="margin-left:5px" Outlined="true"  @onclick="OnUpdateSummary">検索実行</MatButton >
    <MatButton @onclick="OnOpenDetailDialog" Outlined="true">追加</MatButton>
    <MatButton OnClick="@(e => { customDialogIsOpen = true; })"Outlined="true">追加2</MatButton>
    <MatButton class="btn btn-primary" style="margin-left:5px" Outlined="true"  @onclick="OnDeleteRow">削除</MatButton >
</p>

@if (forecasts == null)
{
}
else
{
<p>
    <MatTextField style="width: 100px" type="number" label="出勤日数" @bind-Value="WorkingDays" />
    <MatTextField style="width: 100px" type="number" label="半日日数" @bind-Value="HalfWorkingDays" />
    <MatTextField style="width: 100px" type="number" label="日当日数" @bind-Value="DailyAllowanceDays" />
    <MatTextField style="width: 120px" type="number" label="運行貸付金" @bind-Value="Operationloan" />
    <MatTextField style="width: 120px" type="number" label="安全手当" @bind-Value="SafetyAllowance" />
    <MatTextField style="width: 120px" type="number" label="安全違反" @bind-Value="SafetyViolation" />
</p>
    <MatTable  Items="@forecasts" class="mat-elevation-z5" Striped="true" UseSortHeaderRow="true" ShowPaging="true" style="color: mediumpurple; font-size: 12px;">
        <MatTableHeader>
            <th><div style="width: 30px"><span class="headr-item-1">選択</span></div></th>
            <th><div style="width: 80px"><span class="headr-item-1">運行日付</span></div></th>
            <th><div style="width: 50px"><span class="headr-item-1">車番</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">例外勤務</span></div></th>
            <th><div style="width: 50px"><span class="headr-item-1">キロ数</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">差引売計</span></div></th>
            <th><div style="width: 50px"><span class="headr-item-1">歩 合</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">混載手当</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">荷扱手当</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">助手手当</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">空車手当</span></div></th>
            <th><div style="width: 70px"><span class="headr-item-1">作業手当</span></div></th>
            <th><div style="width: 50px"><span class="headr-item-1">立替金</span></div></th>
            <th><div style="width: 50px"><span class="headr-item-1">高速代</span></div></th>
            <th><div style="width: 100px"><span class="headr-item-1">備考</span></div></th>
        </MatTableHeader>
        <MatTableRow>
            <td><MatCheckbox @bind-Value="@context.Selected"></MatCheckbox></td>
            <td>@context.Date.ToShortDateString() - @context.Date.ToShortDateString()</td>
            <td>@context.CarNo</td>
            <td>@context.Exception</td>
            <td>@String.Format("{0:#,###}", @context.Distance)</td>
            <td>@String.Format("{0:#,###}", @context.NetSales)</td>
            <td>@String.Format("{0:#,###}", @context.Commission)</td>
            <td>@String.Format("{0:#,###}", @context.ConsolidationAllowance)</td>
            <td>@String.Format("{0:#,###}", @context.CargoHandlingAllowance)</td>
            <td>@String.Format("{0:#,###}", @context.AssistantAllowance)</td>
            <td>@String.Format("{0:#,###}", @context.EmptyCarAllowance)</td>
            <td>@String.Format("{0:#,###}", @context.WorkAllowance)</td>
            <td>@String.Format("{0:#,###}", @context.AdvancePayment)</td>
            <td>@String.Format("{0:#,###}", @context.ExpresswayFee)</td>
            <td></td>
        </MatTableRow>
    </MatTable >
}

<NippouInputDialog IsDialogOpen="@customDialogIsOpen" Title="乗務記録表登録画面（明細画面）" Message="" Values="@values"
                ButtonAction="@(e => { customDialogIsOpen = false;  result = e.ToString(); })" />
@code {
    string result = string.Empty;
    bool customDialogIsOpen = false;
    string values;
   
}

@code
{
    CrewItemType? assetCrewNo;

    CrewItemType[] crewNoList = new[]
    {
        new CrewItemType("", ""),
        new CrewItemType("2000", "CrewA"),
        new CrewItemType("2001", "Crew B"),
        new CrewItemType("2002", "Crew C"),
        new CrewItemType("2003", "Crew D"),
    };

    class CrewItemType
    {
        public string No { get; }
        public string Name { get; }

        public CrewItemType(string no, string name)
        {
            No = no;
            Name = name;
        }
    }

}

@code {
    private List<NippouForecast>? forecasts;
    private int SalaryYYYYMM;
    private int WorkingDays;
    private int HalfWorkingDays;
    private int DailyAllowanceDays;
    private int Operationloan;
    private int SafetyAllowance;
    private int SafetyViolation;

    public int Value { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
    }

    private async Task OnOpenDetailDialog()
    {
        JsRuntime.InvokeAsync<object>("window.alert", "OnOpenDetailDialog");        
        await MatDialogService.OpenAsync(typeof(NippouInputDialog), null);
    }

    private void OnDeleteRow()
    {
        
    }

    private void OnAddRow()
    {
    }


    private void OnUpdateSummary()
    {
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "待機", "その他", "" };

        forecasts = new List<NippouForecast>(5);
        for (int i=0; i<5;++i)
        {
            forecasts.Add(
                new NippouForecast() 
                {
                    Date = startDate.AddDays(i),
                    CarNo = Random.Shared.Next(2000, 2500),
                    Exception = summaries[Random.Shared.Next(summaries.Length)],
                    Distance = Random.Shared.Next(1000, 10000),
                    NetSales = Random.Shared.Next(0, 1000000),
                    Commission = Random.Shared.Next(0, 200000),
                    ConsolidationAllowance = Random.Shared.Next(0, 10000),
                    CargoHandlingAllowance = Random.Shared.Next(0, 10000),
                    AssistantAllowance = Random.Shared.Next(0, 10000),
                    EmptyCarAllowance = Random.Shared.Next(0, 10000),
                    WorkAllowance = Random.Shared.Next(0, 10000),
                    AdvancePayment = Random.Shared.Next(0, 100000),
                    ExpresswayFee = Random.Shared.Next(0, 10000),
                }
            );
        }
    }
    private class NippouForecast
    {
        public bool Selected { get; set; }
        public DateOnly Date { get; set; }
        public int CarNo { get; set; }
        public string? Exception { get; set; }
        public int Distance { get; set; }
        public int NetSales { get; set; }
        public int Commission { get; set; }
        public int ConsolidationAllowance { get; set; }
        public int CargoHandlingAllowance { get; set; }
        public int AssistantAllowance { get; set; }
        public int EmptyCarAllowance { get; set; }
        public int WorkAllowance { get; set; }
        public int AdvancePayment { get; set; }
        public int ExpresswayFee { get; set; }
    }
}
